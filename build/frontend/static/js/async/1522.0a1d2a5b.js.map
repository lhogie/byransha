{"version":3,"file":"static/js/async/1522.0a1d2a5b.js","sources":["webpack://login_page/./node_modules/lodash-es/clone.js","webpack://login_page/./node_modules/dagre-d3-es/src/graphlib/json.js","webpack://login_page/./node_modules/mermaid/dist/chunks/mermaid.core/dagre-JOIXM2OF.mjs"],"sourcesContent":["import baseClone from './_baseClone.js';\n\n/** Used to compose bitmasks for cloning. */\nvar CLONE_SYMBOLS_FLAG = 4;\n\n/**\n * Creates a shallow clone of `value`.\n *\n * **Note:** This method is loosely based on the\n * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)\n * and supports cloning arrays, array buffers, booleans, date objects, maps,\n * numbers, `Object` objects, regexes, sets, strings, symbols, and typed\n * arrays. The own enumerable properties of `arguments` objects are cloned\n * as plain objects. An empty object is returned for uncloneable values such\n * as error objects, functions, DOM nodes, and WeakMaps.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to clone.\n * @returns {*} Returns the cloned value.\n * @see _.cloneDeep\n * @example\n *\n * var objects = [{ 'a': 1 }, { 'b': 2 }];\n *\n * var shallow = _.clone(objects);\n * console.log(shallow[0] === objects[0]);\n * // => true\n */\nfunction clone(value) {\n  return baseClone(value, CLONE_SYMBOLS_FLAG);\n}\n\nexport default clone;\n","import * as _ from 'lodash-es';\nimport { Graph } from './graph.js';\n\nexport { write, read };\n\nfunction write(g) {\n  var json = {\n    options: {\n      directed: g.isDirected(),\n      multigraph: g.isMultigraph(),\n      compound: g.isCompound(),\n    },\n    nodes: writeNodes(g),\n    edges: writeEdges(g),\n  };\n  if (!_.isUndefined(g.graph())) {\n    json.value = _.clone(g.graph());\n  }\n  return json;\n}\n\nfunction writeNodes(g) {\n  return _.map(g.nodes(), function (v) {\n    var nodeValue = g.node(v);\n    var parent = g.parent(v);\n    var node = { v: v };\n    if (!_.isUndefined(nodeValue)) {\n      node.value = nodeValue;\n    }\n    if (!_.isUndefined(parent)) {\n      node.parent = parent;\n    }\n    return node;\n  });\n}\n\nfunction writeEdges(g) {\n  return _.map(g.edges(), function (e) {\n    var edgeValue = g.edge(e);\n    var edge = { v: e.v, w: e.w };\n    if (!_.isUndefined(e.name)) {\n      edge.name = e.name;\n    }\n    if (!_.isUndefined(edgeValue)) {\n      edge.value = edgeValue;\n    }\n    return edge;\n  });\n}\n\nfunction read(json) {\n  var g = new Graph(json.options).setGraph(json.value);\n  _.each(json.nodes, function (entry) {\n    g.setNode(entry.v, entry.value);\n    if (entry.parent) {\n      g.setParent(entry.v, entry.parent);\n    }\n  });\n  _.each(json.edges, function (entry) {\n    g.setEdge({ v: entry.v, w: entry.w, name: entry.name }, entry.value);\n  });\n  return g;\n}\n","import {\n  clear as clear2,\n  insertEdge,\n  insertEdgeLabel,\n  markers_default,\n  positionEdgeLabel\n} from \"./chunk-M6DAPIYF.mjs\";\nimport \"./chunk-MXNHSMXR.mjs\";\nimport {\n  clear,\n  clear2 as clear3,\n  insertCluster,\n  insertNode,\n  positionNode,\n  setNodeElem,\n  updateNodeBounds\n} from \"./chunk-JW4RIYDF.mjs\";\nimport {\n  getSubGraphTitleMargins\n} from \"./chunk-AC5SNWB5.mjs\";\nimport \"./chunk-UWXLY5YG.mjs\";\nimport \"./chunk-QESNASVV.mjs\";\nimport \"./chunk-55PJQP7W.mjs\";\nimport {\n  __name,\n  getConfig2 as getConfig,\n  log\n} from \"./chunk-3XYRH5AP.mjs\";\n\n// src/rendering-util/layout-algorithms/dagre/index.js\nimport { layout as dagreLayout } from \"dagre-d3-es/src/dagre/index.js\";\nimport * as graphlibJson2 from \"dagre-d3-es/src/graphlib/json.js\";\nimport * as graphlib2 from \"dagre-d3-es/src/graphlib/index.js\";\n\n// src/rendering-util/layout-algorithms/dagre/mermaid-graphlib.js\nimport * as graphlib from \"dagre-d3-es/src/graphlib/index.js\";\nimport * as graphlibJson from \"dagre-d3-es/src/graphlib/json.js\";\nvar clusterDb = /* @__PURE__ */ new Map();\nvar descendants = /* @__PURE__ */ new Map();\nvar parents = /* @__PURE__ */ new Map();\nvar clear4 = /* @__PURE__ */ __name(() => {\n  descendants.clear();\n  parents.clear();\n  clusterDb.clear();\n}, \"clear\");\nvar isDescendant = /* @__PURE__ */ __name((id, ancestorId) => {\n  const ancestorDescendants = descendants.get(ancestorId) || [];\n  log.trace(\"In isDescendant\", ancestorId, \" \", id, \" = \", ancestorDescendants.includes(id));\n  return ancestorDescendants.includes(id);\n}, \"isDescendant\");\nvar edgeInCluster = /* @__PURE__ */ __name((edge, clusterId) => {\n  const clusterDescendants = descendants.get(clusterId) || [];\n  log.info(\"Descendants of \", clusterId, \" is \", clusterDescendants);\n  log.info(\"Edge is \", edge);\n  if (edge.v === clusterId || edge.w === clusterId) {\n    return false;\n  }\n  if (!clusterDescendants) {\n    log.debug(\"Tilt, \", clusterId, \",not in descendants\");\n    return false;\n  }\n  return clusterDescendants.includes(edge.v) || isDescendant(edge.v, clusterId) || isDescendant(edge.w, clusterId) || clusterDescendants.includes(edge.w);\n}, \"edgeInCluster\");\nvar copy = /* @__PURE__ */ __name((clusterId, graph, newGraph, rootId) => {\n  log.warn(\n    \"Copying children of \",\n    clusterId,\n    \"root\",\n    rootId,\n    \"data\",\n    graph.node(clusterId),\n    rootId\n  );\n  const nodes = graph.children(clusterId) || [];\n  if (clusterId !== rootId) {\n    nodes.push(clusterId);\n  }\n  log.warn(\"Copying (nodes) clusterId\", clusterId, \"nodes\", nodes);\n  nodes.forEach((node) => {\n    if (graph.children(node).length > 0) {\n      copy(node, graph, newGraph, rootId);\n    } else {\n      const data = graph.node(node);\n      log.info(\"cp \", node, \" to \", rootId, \" with parent \", clusterId);\n      newGraph.setNode(node, data);\n      if (rootId !== graph.parent(node)) {\n        log.warn(\"Setting parent\", node, graph.parent(node));\n        newGraph.setParent(node, graph.parent(node));\n      }\n      if (clusterId !== rootId && node !== clusterId) {\n        log.debug(\"Setting parent\", node, clusterId);\n        newGraph.setParent(node, clusterId);\n      } else {\n        log.info(\"In copy \", clusterId, \"root\", rootId, \"data\", graph.node(clusterId), rootId);\n        log.debug(\n          \"Not Setting parent for node=\",\n          node,\n          \"cluster!==rootId\",\n          clusterId !== rootId,\n          \"node!==clusterId\",\n          node !== clusterId\n        );\n      }\n      const edges = graph.edges(node);\n      log.debug(\"Copying Edges\", edges);\n      edges.forEach((edge) => {\n        log.info(\"Edge\", edge);\n        const data2 = graph.edge(edge.v, edge.w, edge.name);\n        log.info(\"Edge data\", data2, rootId);\n        try {\n          if (edgeInCluster(edge, rootId)) {\n            log.info(\"Copying as \", edge.v, edge.w, data2, edge.name);\n            newGraph.setEdge(edge.v, edge.w, data2, edge.name);\n            log.info(\"newGraph edges \", newGraph.edges(), newGraph.edge(newGraph.edges()[0]));\n          } else {\n            log.info(\n              \"Skipping copy of edge \",\n              edge.v,\n              \"-->\",\n              edge.w,\n              \" rootId: \",\n              rootId,\n              \" clusterId:\",\n              clusterId\n            );\n          }\n        } catch (e) {\n          log.error(e);\n        }\n      });\n    }\n    log.debug(\"Removing node\", node);\n    graph.removeNode(node);\n  });\n}, \"copy\");\nvar extractDescendants = /* @__PURE__ */ __name((id, graph) => {\n  const children = graph.children(id);\n  let res = [...children];\n  for (const child of children) {\n    parents.set(child, id);\n    res = [...res, ...extractDescendants(child, graph)];\n  }\n  return res;\n}, \"extractDescendants\");\nvar findCommonEdges = /* @__PURE__ */ __name((graph, id1, id2) => {\n  const edges1 = graph.edges().filter((edge) => edge.v === id1 || edge.w === id1);\n  const edges2 = graph.edges().filter((edge) => edge.v === id2 || edge.w === id2);\n  const edges1Prim = edges1.map((edge) => {\n    return { v: edge.v === id1 ? id2 : edge.v, w: edge.w === id1 ? id1 : edge.w };\n  });\n  const edges2Prim = edges2.map((edge) => {\n    return { v: edge.v, w: edge.w };\n  });\n  const result = edges1Prim.filter((edgeIn1) => {\n    return edges2Prim.some((edge) => edgeIn1.v === edge.v && edgeIn1.w === edge.w);\n  });\n  return result;\n}, \"findCommonEdges\");\nvar findNonClusterChild = /* @__PURE__ */ __name((id, graph, clusterId) => {\n  const children = graph.children(id);\n  log.trace(\"Searching children of id \", id, children);\n  if (children.length < 1) {\n    return id;\n  }\n  let reserve;\n  for (const child of children) {\n    const _id = findNonClusterChild(child, graph, clusterId);\n    const commonEdges = findCommonEdges(graph, clusterId, _id);\n    if (_id) {\n      if (commonEdges.length > 0) {\n        reserve = _id;\n      } else {\n        return _id;\n      }\n    }\n  }\n  return reserve;\n}, \"findNonClusterChild\");\nvar getAnchorId = /* @__PURE__ */ __name((id) => {\n  if (!clusterDb.has(id)) {\n    return id;\n  }\n  if (!clusterDb.get(id).externalConnections) {\n    return id;\n  }\n  if (clusterDb.has(id)) {\n    return clusterDb.get(id).id;\n  }\n  return id;\n}, \"getAnchorId\");\nvar adjustClustersAndEdges = /* @__PURE__ */ __name((graph, depth) => {\n  if (!graph || depth > 10) {\n    log.debug(\"Opting out, no graph \");\n    return;\n  } else {\n    log.debug(\"Opting in, graph \");\n  }\n  graph.nodes().forEach(function(id) {\n    const children = graph.children(id);\n    if (children.length > 0) {\n      log.warn(\n        \"Cluster identified\",\n        id,\n        \" Replacement id in edges: \",\n        findNonClusterChild(id, graph, id)\n      );\n      descendants.set(id, extractDescendants(id, graph));\n      clusterDb.set(id, { id: findNonClusterChild(id, graph, id), clusterData: graph.node(id) });\n    }\n  });\n  graph.nodes().forEach(function(id) {\n    const children = graph.children(id);\n    const edges = graph.edges();\n    if (children.length > 0) {\n      log.debug(\"Cluster identified\", id, descendants);\n      edges.forEach((edge) => {\n        const d1 = isDescendant(edge.v, id);\n        const d2 = isDescendant(edge.w, id);\n        if (d1 ^ d2) {\n          log.warn(\"Edge: \", edge, \" leaves cluster \", id);\n          log.warn(\"Descendants of XXX \", id, \": \", descendants.get(id));\n          clusterDb.get(id).externalConnections = true;\n        }\n      });\n    } else {\n      log.debug(\"Not a cluster \", id, descendants);\n    }\n  });\n  for (let id of clusterDb.keys()) {\n    const nonClusterChild = clusterDb.get(id).id;\n    const parent = graph.parent(nonClusterChild);\n    if (parent !== id && clusterDb.has(parent) && !clusterDb.get(parent).externalConnections) {\n      clusterDb.get(id).id = parent;\n    }\n  }\n  graph.edges().forEach(function(e) {\n    const edge = graph.edge(e);\n    log.warn(\"Edge \" + e.v + \" -> \" + e.w + \": \" + JSON.stringify(e));\n    log.warn(\"Edge \" + e.v + \" -> \" + e.w + \": \" + JSON.stringify(graph.edge(e)));\n    let v = e.v;\n    let w = e.w;\n    log.warn(\n      \"Fix XXX\",\n      clusterDb,\n      \"ids:\",\n      e.v,\n      e.w,\n      \"Translating: \",\n      clusterDb.get(e.v),\n      \" --- \",\n      clusterDb.get(e.w)\n    );\n    if (clusterDb.get(e.v) || clusterDb.get(e.w)) {\n      log.warn(\"Fixing and trying - removing XXX\", e.v, e.w, e.name);\n      v = getAnchorId(e.v);\n      w = getAnchorId(e.w);\n      graph.removeEdge(e.v, e.w, e.name);\n      if (v !== e.v) {\n        const parent = graph.parent(v);\n        clusterDb.get(parent).externalConnections = true;\n        edge.fromCluster = e.v;\n      }\n      if (w !== e.w) {\n        const parent = graph.parent(w);\n        clusterDb.get(parent).externalConnections = true;\n        edge.toCluster = e.w;\n      }\n      log.warn(\"Fix Replacing with XXX\", v, w, e.name);\n      graph.setEdge(v, w, edge, e.name);\n    }\n  });\n  log.warn(\"Adjusted Graph\", graphlibJson.write(graph));\n  extractor(graph, 0);\n  log.trace(clusterDb);\n}, \"adjustClustersAndEdges\");\nvar extractor = /* @__PURE__ */ __name((graph, depth) => {\n  log.warn(\"extractor - \", depth, graphlibJson.write(graph), graph.children(\"D\"));\n  if (depth > 10) {\n    log.error(\"Bailing out\");\n    return;\n  }\n  let nodes = graph.nodes();\n  let hasChildren = false;\n  for (const node of nodes) {\n    const children = graph.children(node);\n    hasChildren = hasChildren || children.length > 0;\n  }\n  if (!hasChildren) {\n    log.debug(\"Done, no node has children\", graph.nodes());\n    return;\n  }\n  log.debug(\"Nodes = \", nodes, depth);\n  for (const node of nodes) {\n    log.debug(\n      \"Extracting node\",\n      node,\n      clusterDb,\n      clusterDb.has(node) && !clusterDb.get(node).externalConnections,\n      !graph.parent(node),\n      graph.node(node),\n      graph.children(\"D\"),\n      \" Depth \",\n      depth\n    );\n    if (!clusterDb.has(node)) {\n      log.debug(\"Not a cluster\", node, depth);\n    } else if (!clusterDb.get(node).externalConnections && graph.children(node) && graph.children(node).length > 0) {\n      log.warn(\n        \"Cluster without external connections, without a parent and with children\",\n        node,\n        depth\n      );\n      const graphSettings = graph.graph();\n      let dir = graphSettings.rankdir === \"TB\" ? \"LR\" : \"TB\";\n      if (clusterDb.get(node)?.clusterData?.dir) {\n        dir = clusterDb.get(node).clusterData.dir;\n        log.warn(\"Fixing dir\", clusterDb.get(node).clusterData.dir, dir);\n      }\n      const clusterGraph = new graphlib.Graph({\n        multigraph: true,\n        compound: true\n      }).setGraph({\n        rankdir: dir,\n        nodesep: 50,\n        ranksep: 50,\n        marginx: 8,\n        marginy: 8\n      }).setDefaultEdgeLabel(function() {\n        return {};\n      });\n      log.warn(\"Old graph before copy\", graphlibJson.write(graph));\n      copy(node, graph, clusterGraph, node);\n      graph.setNode(node, {\n        clusterNode: true,\n        id: node,\n        clusterData: clusterDb.get(node).clusterData,\n        label: clusterDb.get(node).label,\n        graph: clusterGraph\n      });\n      log.warn(\"New graph after copy node: (\", node, \")\", graphlibJson.write(clusterGraph));\n      log.debug(\"Old graph after copy\", graphlibJson.write(graph));\n    } else {\n      log.warn(\n        \"Cluster ** \",\n        node,\n        \" **not meeting the criteria !externalConnections:\",\n        !clusterDb.get(node).externalConnections,\n        \" no parent: \",\n        !graph.parent(node),\n        \" children \",\n        graph.children(node) && graph.children(node).length > 0,\n        graph.children(\"D\"),\n        depth\n      );\n      log.debug(clusterDb);\n    }\n  }\n  nodes = graph.nodes();\n  log.warn(\"New list of nodes\", nodes);\n  for (const node of nodes) {\n    const data = graph.node(node);\n    log.warn(\" Now next level\", node, data);\n    if (data?.clusterNode) {\n      extractor(data.graph, depth + 1);\n    }\n  }\n}, \"extractor\");\nvar sorter = /* @__PURE__ */ __name((graph, nodes) => {\n  if (nodes.length === 0) {\n    return [];\n  }\n  let result = Object.assign([], nodes);\n  nodes.forEach((node) => {\n    const children = graph.children(node);\n    const sorted = sorter(graph, children);\n    result = [...result, ...sorted];\n  });\n  return result;\n}, \"sorter\");\nvar sortNodesByHierarchy = /* @__PURE__ */ __name((graph) => sorter(graph, graph.children()), \"sortNodesByHierarchy\");\n\n// src/rendering-util/layout-algorithms/dagre/index.js\nvar recursiveRender = /* @__PURE__ */ __name(async (_elem, graph, diagramType, id, parentCluster, siteConfig) => {\n  log.warn(\"Graph in recursive render:XAX\", graphlibJson2.write(graph), parentCluster);\n  const dir = graph.graph().rankdir;\n  log.trace(\"Dir in recursive render - dir:\", dir);\n  const elem = _elem.insert(\"g\").attr(\"class\", \"root\");\n  if (!graph.nodes()) {\n    log.info(\"No nodes found for\", graph);\n  } else {\n    log.info(\"Recursive render XXX\", graph.nodes());\n  }\n  if (graph.edges().length > 0) {\n    log.info(\"Recursive edges\", graph.edge(graph.edges()[0]));\n  }\n  const clusters = elem.insert(\"g\").attr(\"class\", \"clusters\");\n  const edgePaths = elem.insert(\"g\").attr(\"class\", \"edgePaths\");\n  const edgeLabels = elem.insert(\"g\").attr(\"class\", \"edgeLabels\");\n  const nodes = elem.insert(\"g\").attr(\"class\", \"nodes\");\n  await Promise.all(\n    graph.nodes().map(async function(v) {\n      const node = graph.node(v);\n      if (parentCluster !== void 0) {\n        const data = JSON.parse(JSON.stringify(parentCluster.clusterData));\n        log.trace(\n          \"Setting data for parent cluster XXX\\n Node.id = \",\n          v,\n          \"\\n data=\",\n          data.height,\n          \"\\nParent cluster\",\n          parentCluster.height\n        );\n        graph.setNode(parentCluster.id, data);\n        if (!graph.parent(v)) {\n          log.trace(\"Setting parent\", v, parentCluster.id);\n          graph.setParent(v, parentCluster.id, data);\n        }\n      }\n      log.info(\"(Insert) Node XXX\" + v + \": \" + JSON.stringify(graph.node(v)));\n      if (node?.clusterNode) {\n        log.info(\"Cluster identified XBX\", v, node.width, graph.node(v));\n        const { ranksep, nodesep } = graph.graph();\n        node.graph.setGraph({\n          ...node.graph.graph(),\n          ranksep: ranksep + 25,\n          nodesep\n        });\n        const o = await recursiveRender(\n          nodes,\n          node.graph,\n          diagramType,\n          id,\n          graph.node(v),\n          siteConfig\n        );\n        const newEl = o.elem;\n        updateNodeBounds(node, newEl);\n        node.diff = o.diff || 0;\n        log.info(\n          \"New compound node after recursive render XAX\",\n          v,\n          \"width\",\n          // node,\n          node.width,\n          \"height\",\n          node.height\n          // node.x,\n          // node.y\n        );\n        setNodeElem(newEl, node);\n      } else {\n        if (graph.children(v).length > 0) {\n          log.trace(\n            \"Cluster - the non recursive path XBX\",\n            v,\n            node.id,\n            node,\n            node.width,\n            \"Graph:\",\n            graph\n          );\n          log.trace(findNonClusterChild(node.id, graph));\n          clusterDb.set(node.id, { id: findNonClusterChild(node.id, graph), node });\n        } else {\n          log.trace(\"Node - the non recursive path XAX\", v, nodes, graph.node(v), dir);\n          await insertNode(nodes, graph.node(v), { config: siteConfig, dir });\n        }\n      }\n    })\n  );\n  const processEdges = /* @__PURE__ */ __name(async () => {\n    const edgePromises = graph.edges().map(async function(e) {\n      const edge = graph.edge(e.v, e.w, e.name);\n      log.info(\"Edge \" + e.v + \" -> \" + e.w + \": \" + JSON.stringify(e));\n      log.info(\"Edge \" + e.v + \" -> \" + e.w + \": \", e, \" \", JSON.stringify(graph.edge(e)));\n      log.info(\n        \"Fix\",\n        clusterDb,\n        \"ids:\",\n        e.v,\n        e.w,\n        \"Translating: \",\n        clusterDb.get(e.v),\n        clusterDb.get(e.w)\n      );\n      await insertEdgeLabel(edgeLabels, edge);\n    });\n    await Promise.all(edgePromises);\n  }, \"processEdges\");\n  await processEdges();\n  log.info(\"Graph before layout:\", JSON.stringify(graphlibJson2.write(graph)));\n  log.info(\"############################################# XXX\");\n  log.info(\"###                Layout                 ### XXX\");\n  log.info(\"############################################# XXX\");\n  dagreLayout(graph);\n  log.info(\"Graph after layout:\", JSON.stringify(graphlibJson2.write(graph)));\n  let diff = 0;\n  let { subGraphTitleTotalMargin } = getSubGraphTitleMargins(siteConfig);\n  await Promise.all(\n    sortNodesByHierarchy(graph).map(async function(v) {\n      const node = graph.node(v);\n      log.info(\n        \"Position XBX => \" + v + \": (\" + node.x,\n        \",\" + node.y,\n        \") width: \",\n        node.width,\n        \" height: \",\n        node.height\n      );\n      if (node?.clusterNode) {\n        node.y += subGraphTitleTotalMargin;\n        log.info(\n          \"A tainted cluster node XBX1\",\n          v,\n          node.id,\n          node.width,\n          node.height,\n          node.x,\n          node.y,\n          graph.parent(v)\n        );\n        clusterDb.get(node.id).node = node;\n        positionNode(node);\n      } else {\n        if (graph.children(v).length > 0) {\n          log.info(\n            \"A pure cluster node XBX1\",\n            v,\n            node.id,\n            node.x,\n            node.y,\n            node.width,\n            node.height,\n            graph.parent(v)\n          );\n          node.height += subGraphTitleTotalMargin;\n          graph.node(node.parentId);\n          const halfPadding = node?.padding / 2 || 0;\n          const labelHeight = node?.labelBBox?.height || 0;\n          const offsetY = labelHeight - halfPadding || 0;\n          log.debug(\"OffsetY\", offsetY, \"labelHeight\", labelHeight, \"halfPadding\", halfPadding);\n          await insertCluster(clusters, node);\n          clusterDb.get(node.id).node = node;\n        } else {\n          const parent = graph.node(node.parentId);\n          node.y += subGraphTitleTotalMargin / 2;\n          log.info(\n            \"A regular node XBX1 - using the padding\",\n            node.id,\n            \"parent\",\n            node.parentId,\n            node.width,\n            node.height,\n            node.x,\n            node.y,\n            \"offsetY\",\n            node.offsetY,\n            \"parent\",\n            parent,\n            parent?.offsetY,\n            node\n          );\n          positionNode(node);\n        }\n      }\n    })\n  );\n  graph.edges().forEach(function(e) {\n    const edge = graph.edge(e);\n    log.info(\"Edge \" + e.v + \" -> \" + e.w + \": \" + JSON.stringify(edge), edge);\n    edge.points.forEach((point) => point.y += subGraphTitleTotalMargin / 2);\n    const startNode = graph.node(e.v);\n    var endNode = graph.node(e.w);\n    const paths = insertEdge(edgePaths, edge, clusterDb, diagramType, startNode, endNode, id);\n    positionEdgeLabel(edge, paths);\n  });\n  graph.nodes().forEach(function(v) {\n    const n = graph.node(v);\n    log.info(v, n.type, n.diff);\n    if (n.isGroup) {\n      diff = n.diff;\n    }\n  });\n  log.warn(\"Returning from recursive render XAX\", elem, diff);\n  return { elem, diff };\n}, \"recursiveRender\");\nvar render = /* @__PURE__ */ __name(async (data4Layout, svg) => {\n  const graph = new graphlib2.Graph({\n    multigraph: true,\n    compound: true\n  }).setGraph({\n    rankdir: data4Layout.direction,\n    nodesep: data4Layout.config?.nodeSpacing || data4Layout.config?.flowchart?.nodeSpacing || data4Layout.nodeSpacing,\n    ranksep: data4Layout.config?.rankSpacing || data4Layout.config?.flowchart?.rankSpacing || data4Layout.rankSpacing,\n    marginx: 8,\n    marginy: 8\n  }).setDefaultEdgeLabel(function() {\n    return {};\n  });\n  const element = svg.select(\"g\");\n  markers_default(element, data4Layout.markers, data4Layout.type, data4Layout.diagramId);\n  clear3();\n  clear2();\n  clear();\n  clear4();\n  data4Layout.nodes.forEach((node) => {\n    graph.setNode(node.id, { ...node });\n    if (node.parentId) {\n      graph.setParent(node.id, node.parentId);\n    }\n  });\n  log.debug(\"Edges:\", data4Layout.edges);\n  data4Layout.edges.forEach((edge) => {\n    if (edge.start === edge.end) {\n      const nodeId = edge.start;\n      const specialId1 = nodeId + \"---\" + nodeId + \"---1\";\n      const specialId2 = nodeId + \"---\" + nodeId + \"---2\";\n      const node = graph.node(nodeId);\n      graph.setNode(specialId1, {\n        domId: specialId1,\n        id: specialId1,\n        parentId: node.parentId,\n        labelStyle: \"\",\n        label: \"\",\n        padding: 0,\n        shape: \"labelRect\",\n        // shape: 'rect',\n        style: \"\",\n        width: 10,\n        height: 10\n      });\n      graph.setParent(specialId1, node.parentId);\n      graph.setNode(specialId2, {\n        domId: specialId2,\n        id: specialId2,\n        parentId: node.parentId,\n        labelStyle: \"\",\n        padding: 0,\n        // shape: 'rect',\n        shape: \"labelRect\",\n        label: \"\",\n        style: \"\",\n        width: 10,\n        height: 10\n      });\n      graph.setParent(specialId2, node.parentId);\n      const edge1 = structuredClone(edge);\n      const edgeMid = structuredClone(edge);\n      const edge2 = structuredClone(edge);\n      edge1.label = \"\";\n      edge1.arrowTypeEnd = \"none\";\n      edge1.id = nodeId + \"-cyclic-special-1\";\n      edgeMid.arrowTypeStart = \"none\";\n      edgeMid.arrowTypeEnd = \"none\";\n      edgeMid.id = nodeId + \"-cyclic-special-mid\";\n      edge2.label = \"\";\n      if (node.isGroup) {\n        edge1.fromCluster = nodeId;\n        edge2.toCluster = nodeId;\n      }\n      edge2.id = nodeId + \"-cyclic-special-2\";\n      edge2.arrowTypeStart = \"none\";\n      graph.setEdge(nodeId, specialId1, edge1, nodeId + \"-cyclic-special-0\");\n      graph.setEdge(specialId1, specialId2, edgeMid, nodeId + \"-cyclic-special-1\");\n      graph.setEdge(specialId2, nodeId, edge2, nodeId + \"-cyc<lic-special-2\");\n    } else {\n      graph.setEdge(edge.start, edge.end, { ...edge }, edge.id);\n    }\n  });\n  log.warn(\"Graph at first:\", JSON.stringify(graphlibJson2.write(graph)));\n  adjustClustersAndEdges(graph);\n  log.warn(\"Graph after XAX:\", JSON.stringify(graphlibJson2.write(graph)));\n  const siteConfig = getConfig();\n  await recursiveRender(\n    element,\n    graph,\n    data4Layout.type,\n    data4Layout.diagramId,\n    void 0,\n    siteConfig\n  );\n}, \"render\");\nexport {\n  render\n};\n"],"names":["n","e","Map","p","r","JSON","g","Object","Promise","i","structuredClone"],"mappings":"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"}